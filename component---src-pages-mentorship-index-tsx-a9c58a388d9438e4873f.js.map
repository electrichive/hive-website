{"version":3,"file":"component---src-pages-mentorship-index-tsx-a9c58a388d9438e4873f.js","mappings":"mMAMO,SAASA,IACZ,OAAOC,EAAAA,EAAAA,KACHC,EAAAA,EAAAA,gBAAe,aAcbC,oBAAoBC,MAE7B,C,8JCrBM,MAAMC,EAAoBC,EAAAA,QAAAA,IAAAA,WAAH,+EAAGA,CAAH,oMASxBC,GAA0B,UAAhBA,EAAMC,MAAoBC,EAAAA,EAAkBC,EAAAA,IAO/CC,EAAgBL,EAAAA,QAAAA,IAAAA,WAAH,2EAAGA,CAAH,MACbM,EAASN,EAAAA,QAAAA,GAAAA,WAAH,oEAAGA,CAAH,wD,mlBCGnB,SAASO,EAAYN,GACjB,MAAMO,EAAgC,UAAhBP,EAAMC,MAAoB,OAAS,QACzD,OACI,UAACH,EAAD,CAAmBG,MAAOD,EAAMC,MAAhC,WACI,wBAAKD,EAAMQ,cACX,SAACJ,EAAD,WACI,SAAC,KAAD,CACIK,IAAKT,EAAMS,IACXC,QAASV,EAAMU,QACfC,UAAWX,EAAMW,eAGzB,wBAAKX,EAAMY,eACX,0BACI,wBACKZ,EAAMa,QAAQC,KAAI,CAACC,EAAQC,KACjB,SAACX,EAAD,UAAiBU,GAAJC,UAIhC,gDACA,SAAC,KAAD,CACIC,IAAKjB,EAAMiB,IACXhB,MAAOM,EACPW,KAAK,sBAIpB,CAKc,SAASC,IAEpB,MAAMC,GAAQzB,EAAAA,EAAAA,gBAAe,cAsBvB0B,GAASC,EAAAA,EAAAA,KACTC,EAAQH,EAAMI,kBAAkB3B,MAAM,GAAG4B,KAAKF,MAC9CG,GAAeC,EAAAA,EAAAA,IACjBN,EACAD,EAAMI,kBAAkB3B,MAAM,GAAG4B,KAAKC,cAGpCE,EAAeC,EAAAA,KACjBF,EAAAA,EAAAA,IAAeN,IACfS,EAAAA,EAAAA,IAHqB,GACJD,EAGnBpC,EAAAA,EAAAA,MACF,OACI,UAAC,KAAD,YACI,SAAC,KAAD,CACIsC,MAAM,qBACNC,SAAS,6BACTC,QAAQ,KAEZ,SAAC,KAAD,KAAWV,KACX,SAACjB,EAAD,GAAaL,MAAM,QAAQU,UAAU,SAAYe,EAAa,MAC9D,SAACpB,EAAD,GAAaL,MAAM,OAAOU,UAAU,QAAWe,EAAa,MAC5D,SAAC,KAAD,CAAcE,aAAcA,KAC5B,SAAC,KAAD,CACIX,IAAI,cACJC,KAAK,qBACLT,KAAKyB,EAAAA,EAAAA,IAAcb,EAAQ,uBAI1C,C","sources":["webpack://electric-hive-website-2.0/./src/graphql/queries/testimonials.ts","webpack://electric-hive-website-2.0/./src/styles/page-styles/mentorship/mentorship.styled.tsx","webpack://electric-hive-website-2.0/./src/pages/mentorship/index.tsx"],"sourcesContent":["import { graphql, useStaticQuery } from 'gatsby';\nimport { stripNodes } from 'src/utils';\n/**\n * React Hook to query gatsby graphql schema for testimonial data\n * @returns all testimonial data\n */\nexport function useTestimonials(): TestimonialsProps['testimonials'] {\n    return stripNodes(\n        useStaticQuery(\n            graphql`\n                query TestimonialQuery {\n                    allTestimonialsJson {\n                        edges {\n                            node {\n                                content\n                                img\n                                author\n                            }\n                        }\n                    }\n                }\n            `\n        ).allTestimonialsJson.edges\n    );\n}\n","import styled from 'styled-components';\nimport { darkThemeMixin, lightThemeMixin } from 'styles/mixins.styled';\n\nexport const StyledMentorBlock = styled.div<Pick<MentorBlockProps, 'theme'>>`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    padding: 50px 200px;\n    text-align: center;\n\n    ${props => (props.theme === 'light' ? lightThemeMixin : darkThemeMixin)}\n\n    @media only screen and (max-width: 1200px) {\n        padding: 30px 50px;\n    }\n`;\n\nexport const MentorContent = styled.div``;\nexport const Bullet = styled.li`\n    font-size: 22px;\n    text-align: left;\n    margin-bottom: 20px;\n`;\n","import {\n    Button,\n    Infoimage,\n    Intro,\n    Layout,\n    Parallax,\n    Slide,\n    Testimonials,\n} from 'components';\nimport * as R from 'ramda';\nimport { pickRandomN, mapUrlsToProps, findImagePath } from 'utils';\nimport { useTestimonials } from 'src/graphql/queries/testimonials';\nimport { useImageUrls } from 'src/graphql/queries/images';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport {\n    Bullet,\n    MentorContent,\n    StyledMentorBlock,\n} from '../../styles/page-styles/mentorship/mentorship.styled';\n\n/**\n *\n */\nfunction MentorBlock(props: MentorBlockProps): JSX.Element {\n    const themeContrast = props.theme === 'light' ? 'dark' : 'light';\n    return (\n        <StyledMentorBlock theme={props.theme}>\n            <h2>{props.firsttitle}</h2>\n            <MentorContent>\n                <Infoimage\n                    img={props.img}\n                    content={props.content}\n                    direction={props.direction}\n                />\n            </MentorContent>\n            <h2>{props.secondtitle}</h2>\n            <div>\n                <ul>\n                    {props.bullets.map((bullet, i) => {\n                        return <Bullet key={i}>{bullet}</Bullet>;\n                    })}\n                </ul>\n            </div>\n            <h2>Why not start now?</h2>\n            <Button\n                url={props.url}\n                theme={themeContrast}\n                text=\"Become a Mentee\"\n            />\n        </StyledMentorBlock>\n    );\n}\n\n/**\n * Content for testimonials is pulled from data JSON\n */\nexport default function Mentorship(): JSX.Element {\n    // query site metadata for page content\n    const query = useStaticQuery(graphql`\n        query MentorshipQuery {\n            allMentorshipJson {\n                edges {\n                    node {\n                        mentorblocks {\n                            url\n                            firsttitle\n                            secondtitle\n                            content\n                            img\n                            bullets\n                        }\n                        intro {\n                            content\n                            title\n                        }\n                    }\n                }\n            }\n        }\n    `);\n    const images = useImageUrls();\n    const intro = query.allMentorshipJson.edges[0].node.intro;\n    const mentorblocks = mapUrlsToProps(\n        images,\n        query.allMentorshipJson.edges[0].node.mentorblocks\n    );\n    const MAX_TESTIMONIALS = 3;\n    const testimonials = R.compose(\n        mapUrlsToProps(images),\n        pickRandomN(MAX_TESTIMONIALS)\n    )(useTestimonials());\n    return (\n        <Layout>\n            <Slide\n                title=\"Mentorship Program\"\n                subtitle=\"Subtitle Mission Statement\"\n                button={false}\n            />\n            <Intro {...intro} />\n            <MentorBlock theme=\"light\" direction=\"right\" {...mentorblocks[0]} />\n            <MentorBlock theme=\"dark\" direction=\"left\" {...mentorblocks[1]} />\n            <Testimonials testimonials={testimonials} />\n            <Parallax\n                url=\"./resources\"\n                text=\"View Our Resources\"\n                img={findImagePath(images, 'stock-code1.jpg')}\n            />\n        </Layout>\n    );\n}\n"],"names":["useTestimonials","stripNodes","useStaticQuery","allTestimonialsJson","edges","StyledMentorBlock","styled","props","theme","lightThemeMixin","darkThemeMixin","MentorContent","Bullet","MentorBlock","themeContrast","firsttitle","img","content","direction","secondtitle","bullets","map","bullet","i","url","text","Mentorship","query","images","useImageUrls","intro","allMentorshipJson","node","mentorblocks","mapUrlsToProps","testimonials","R","pickRandomN","title","subtitle","button","findImagePath"],"sourceRoot":""}