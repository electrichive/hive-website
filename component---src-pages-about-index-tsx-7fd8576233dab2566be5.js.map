{"version":3,"file":"component---src-pages-about-index-tsx-7fd8576233dab2566be5.js","mappings":"mMAMO,SAASA,IACZ,OAAOC,EAAAA,EAAAA,KACHC,EAAAA,EAAAA,gBAAe,aAcbC,oBAAoBC,MAE7B,C,sHCtBM,MAAMC,EAAeC,EAAAA,QAAAA,IAAAA,WAAH,qEAAGA,CAAH,6NAgBZC,EAAcD,EAAAA,QAAAA,IAAAA,WAAH,oEAAGA,CAAH,uKACXE,GAA0B,UAAhBA,EAAMC,MAAoB,IAAM,MAGpCD,GACK,UAAhBA,EAAMC,MAAoB,WAAa,eAUlCC,EAAYJ,EAAAA,QAAAA,IAAAA,WAAH,kEAAGA,CAAH,+GAQTK,EAAYL,EAAAA,QAAAA,GAAAA,WAAH,kEAAGA,CAAH,wGAEJE,GAA0B,UAAhBA,EAAMC,MAAoB,QAAU,SAOnDG,EAAkBN,EAAAA,QAAAA,EAAAA,WAAH,wEAAGA,CAAH,sHACVE,GAA0B,UAAhBA,EAAMC,MAAoB,QAAU,SAE1DD,GACkB,UAAhBA,EAAMC,MACA,yCACA,+C,inBClCd,SAASI,EAAUL,GACf,OACI,UAACH,EAAD,YACI,UAACE,EAAD,CAAaE,MAAOD,EAAMC,MAA1B,WACI,SAACE,EAAD,CAAWF,MAAOD,EAAMC,MAAxB,SAAgCD,EAAMM,SACtC,SAACF,EAAD,CAAiBH,MAAOD,EAAMC,MAA9B,SACKD,EAAMO,QAEX,SAAC,KAAD,KAAYP,EAAMQ,aAEtB,SAACN,EAAD,CAAWO,IAAKT,EAAMU,QAGjC,CAEc,SAASC,IAEpB,MAAMC,GAAQlB,EAAAA,EAAAA,gBAAe,cAmBvBmB,EAAQD,EAAME,aAAalB,MAAM,GAAGmB,KAAKF,MACzCG,EAAaJ,EAAME,aAAalB,MAAM,GAAGmB,KAAKC,WAE9CC,GAASC,EAAAA,EAAAA,KACTC,GAAoBC,EAAAA,EAAAA,IAAeH,EAAQD,GAC3CK,EAAeC,EAAAA,KACjBF,EAAAA,EAAAA,IAAeH,IACfM,EAAAA,EAAAA,IALqB,GAGJD,EAGnB9B,EAAAA,EAAAA,MACF,OACI,UAAC,KAAD,YACI,SAAC,KAAD,CACIc,MAAM,WACNkB,SAAS,6BACThB,QAAQ,KAEZ,SAAC,KAAD,WACI,SAAC,KAAD,KAAWK,OAEf,SAAC,KAAD,WACI,SAACR,EAAD,CACIJ,MAAM,QACNK,MAAOa,EAAkB,GAAGb,MAC5BC,KAAMY,EAAkB,GAAGZ,KAC3BG,IAAKS,EAAkB,GAAGT,IAC1BF,OAAQ,CACJD,KAAM,UACNkB,IAAK,cACLxB,MAAO,cAInB,SAAC,KAAD,WACI,SAACI,EAAD,CACIC,MAAOa,EAAkB,GAAGb,MAC5BC,KAAMY,EAAkB,GAAGZ,KAC3BG,IAAKS,EAAkB,GAAGT,IAC1BT,MAAM,OACNO,OAAQ,CACJP,MAAO,OACPM,KAAM,aACNkB,IAAK,cAIjB,SAAC,KAAD,WACI,SAAC,KAAD,CAAcJ,aAAcA,QAI3C,C","sources":["webpack://electric-hive-website-2.0/./src/graphql/queries/testimonials.ts","webpack://electric-hive-website-2.0/./src/styles/page-styles/about/about.styled.tsx","webpack://electric-hive-website-2.0/./src/pages/about/index.tsx"],"sourcesContent":["import { graphql, useStaticQuery } from 'gatsby';\nimport { stripNodes } from 'src/utils';\n/**\n * React Hook to query gatsby graphql schema for testimonial data\n * @returns all testimonial data\n */\nexport function useTestimonials(): TestimonialsProps['testimonials'] {\n    return stripNodes(\n        useStaticQuery(\n            graphql`\n                query TestimonialQuery {\n                    allTestimonialsJson {\n                        edges {\n                            node {\n                                content\n                                img\n                                author\n                            }\n                        }\n                    }\n                }\n            `\n        ).allTestimonialsJson.edges\n    );\n}\n","import styled from 'styled-components';\n\nexport const InfoBlockDiv = styled.div<Partial<InfoBlockProps>>`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    min-height: 600px;\n    padding: 100px;\n    text-align: center;\n    width: 100%;\n    @media (max-width: 1000px) {\n        flex-direction: column;\n        padding: 10px;\n        margin-bottom: 30px;\n    }\n`;\n\nexport const InfoContent = styled.div`\n    order: ${props => (props.theme === 'light' ? '0' : '2')};\n    display: flex;\n    flex-direction: column;\n    align-items: ${props =>\n        props.theme === 'light' ? 'flex-end' : 'flex-start'};\n    padding: 70px;\n    width: 60%;\n    @media (max-width: 1000px) {\n        width: 100%;\n        align-items: center;\n        padding: 0px;\n        order: 0;\n    }\n`;\nexport const InfoImage = styled.img`\n    width: 40%;\n    border-radius: 30px;\n    box-shadow: 3px 3px 5px var(--black);\n    @media (max-width: 1000px) {\n        display: none;\n    }\n`;\nexport const InfoTitle = styled.h2`\n    font-size: 36px;\n    text-align: ${props => (props.theme === 'light' ? 'right' : 'left')};\n    @media (max-width: 1000px) {\n        width: 100%;\n        text-align: center;\n        padding: 0px;\n    }\n`;\nexport const InfoDescription = styled.p`\n    text-align: ${props => (props.theme === 'light' ? 'right' : 'left')};\n    padding: 20px;\n    ${props =>\n        props.theme === 'light'\n            ? 'border-right: 10px solid var(--beige);'\n            : 'border-left: 10px solid var(--darkorange);'}\n    @media (max-width: 1000px) {\n        width: 100%;\n        text-align: center;\n        padding: 0px;\n        border: none;\n    }\n`;\n","import {\n    Intro,\n    Slide,\n    Layout,\n    Button,\n    Testimonials,\n    FadeInSection,\n} from 'components';\nimport { pickRandomN } from 'utils';\nimport { mapUrlsToProps } from 'src/utils';\nimport { useTestimonials } from 'src/graphql/queries/testimonials';\nimport {\n    InfoBlockDiv,\n    InfoContent,\n    InfoImage,\n    InfoTitle,\n    InfoDescription,\n} from '../../styles/page-styles/about/about.styled';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport * as R from 'ramda';\nimport { useImageUrls } from 'src/graphql/queries/images';\n\nfunction InfoBlock(props: InfoBlockProps): JSX.Element {\n    return (\n        <InfoBlockDiv>\n            <InfoContent theme={props.theme}>\n                <InfoTitle theme={props.theme}>{props.title}</InfoTitle>\n                <InfoDescription theme={props.theme}>\n                    {props.text}\n                </InfoDescription>\n                <Button {...props.button} />\n            </InfoContent>\n            <InfoImage src={props.img}></InfoImage>\n        </InfoBlockDiv>\n    );\n}\n\nexport default function PageAbout(): JSX.Element {\n    // query site metadata for page content\n    const query = useStaticQuery(graphql`\n        query AboutQuery {\n            allAboutJson {\n                edges {\n                    node {\n                        infoblocks {\n                            text\n                            title\n                            img\n                        }\n                        intro {\n                            content\n                            title\n                        }\n                    }\n                }\n            }\n        }\n    `);\n    const intro = query.allAboutJson.edges[0].node.intro;\n    const infoblocks = query.allAboutJson.edges[0].node.infoblocks;\n    const MAX_TESTIMONIALS = 3;\n    const images = useImageUrls();\n    const updatedInfoblocks = mapUrlsToProps(images, infoblocks);\n    const testimonials = R.compose(\n        mapUrlsToProps(images),\n        pickRandomN(MAX_TESTIMONIALS)\n    )(useTestimonials());\n    return (\n        <Layout>\n            <Slide\n                title=\"About Us\"\n                subtitle=\"Subtitle Mission Statement\"\n                button={true}\n            />\n            <FadeInSection>\n                <Intro {...intro} />\n            </FadeInSection>\n            <FadeInSection>\n                <InfoBlock\n                    theme=\"light\"\n                    title={updatedInfoblocks[0].title}\n                    text={updatedInfoblocks[0].text}\n                    img={updatedInfoblocks[0].img}\n                    button={{\n                        text: 'Sign Up',\n                        url: '/mentorship',\n                        theme: 'light',\n                    }}\n                />\n            </FadeInSection>\n            <FadeInSection>\n                <InfoBlock\n                    title={updatedInfoblocks[1].title}\n                    text={updatedInfoblocks[1].text}\n                    img={updatedInfoblocks[1].img}\n                    theme=\"dark\"\n                    button={{\n                        theme: 'dark',\n                        text: 'Contribute',\n                        url: '/foss',\n                    }}\n                />\n            </FadeInSection>\n            <FadeInSection>\n                <Testimonials testimonials={testimonials} />\n            </FadeInSection>\n        </Layout>\n    );\n}\n"],"names":["useTestimonials","stripNodes","useStaticQuery","allTestimonialsJson","edges","InfoBlockDiv","styled","InfoContent","props","theme","InfoImage","InfoTitle","InfoDescription","InfoBlock","title","text","button","src","img","PageAbout","query","intro","allAboutJson","node","infoblocks","images","useImageUrls","updatedInfoblocks","mapUrlsToProps","testimonials","R","pickRandomN","subtitle","url"],"sourceRoot":""}